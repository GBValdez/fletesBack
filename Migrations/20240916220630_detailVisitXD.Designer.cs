// <auto-generated />
using System;
using AvionesBackNet.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace fletesProyect.Migrations
{
    [DbContext(typeof(DBProyContext))]
    [Migration("20240916220630_detailVisitXD")]
    partial class detailVisitXD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AvionesBackNet.Models.binnacleBody", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("binnacleHeaderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("newValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("previousValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("binnacleHeaderId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("BinnacleBodies");
                });

            modelBuilder.Entity("AvionesBackNet.Models.binnacleHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("idRegister")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("table")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("transactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("BinnacleHeaders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("fletesProyect.models.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("closingTime")
                        .HasColumnType("interval");

                    b.Property<long>("countryOptId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("licensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("modelId")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("openingTime")
                        .HasColumnType("interval");

                    b.Property<int>("stopLimit")
                        .HasColumnType("integer");

                    b.Property<string>("tel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("countryOptId");

                    b.HasIndex("modelId");

                    b.HasIndex("userId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("fletesProyect.models.Orden", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("clientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deliveryCoord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("deliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("driverId")
                        .HasColumnType("bigint");

                    b.Property<string>("originCoord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.HasIndex("driverId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("fletesProyect.models.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("userUpdateId");

                    b.ToTable("providers");
                });

            modelBuilder.Entity("fletesProyect.models.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<TimeSpan>("closingTime")
                        .HasColumnType("interval");

                    b.Property<string>("cord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("countryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("openingTime")
                        .HasColumnType("interval");

                    b.Property<long>("providerId")
                        .HasColumnType("bigint");

                    b.Property<string>("tel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.HasIndex("providerId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("stations");
                });

            modelBuilder.Entity("fletesProyect.models.Visit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("arrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("estimatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("realDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("stationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("stationId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("visits");
                });

            modelBuilder.Entity("fletesProyect.models.modelGasoline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("gasolineLtsKm")
                        .HasColumnType("real");

                    b.Property<long>("gasolineTypeId")
                        .HasColumnType("bigint");

                    b.Property<float>("maximumWeight")
                        .HasColumnType("real");

                    b.Property<long>("modelId")
                        .HasColumnType("bigint");

                    b.Property<long>("typeVehicleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("gasolineTypeId");

                    b.HasIndex("modelId");

                    b.HasIndex("typeVehicleId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("modelGasolines");
                });

            modelBuilder.Entity("fletesProyect.models.ordenDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("orderId")
                        .HasColumnType("bigint");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("fletesProyect.models.product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("brandProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("categoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("brandProductId");

                    b.HasIndex("categoryId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("fletesProyect.models.productProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.Property<long>("providerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.HasIndex("providerId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("productProviders");
                });

            modelBuilder.Entity("fletesProyect.models.routeStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("distance")
                        .HasColumnType("double precision");

                    b.Property<double>("duration")
                        .HasColumnType("double precision");

                    b.Property<long>("stationAId")
                        .HasColumnType("bigint");

                    b.Property<long>("stationBId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("stationAId");

                    b.HasIndex("stationBId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("routeStations");
                });

            modelBuilder.Entity("fletesProyect.models.stationProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.Property<long>("stationId")
                        .HasColumnType("bigint");

                    b.Property<long>("stock")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.HasIndex("stationId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("stationProducts");
                });

            modelBuilder.Entity("fletesProyect.models.vehicleProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.Property<long>("quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("typeVehicleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.HasIndex("typeVehicleId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("VehicleProducts");
                });

            modelBuilder.Entity("fletesProyect.models.visitProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ordenDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("quantity")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.Property<long>("visitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ordenDetailId");

                    b.HasIndex("userUpdateId");

                    b.HasIndex("visitId");

                    b.ToTable("visitProducts");
                });

            modelBuilder.Entity("project.roles.rolEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("userUpdateId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("project.users.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("project.users.userEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("userUpdateId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("project.utils.catalogue.Catalogue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("catalogueParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("catalogueTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("catalogueParentId");

                    b.HasIndex("catalogueTypeId");

                    b.HasIndex("userUpdateId");

                    b.ToTable("catalogues");
                });

            modelBuilder.Entity("project.utils.catalogue.catalogueType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userUpdateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("userUpdateId");

                    b.ToTable("catalogueTypes");
                });

            modelBuilder.Entity("AvionesBackNet.Models.binnacleBody", b =>
                {
                    b.HasOne("AvionesBackNet.Models.binnacleHeader", "binnacleHeader")
                        .WithMany("binnacleBody")
                        .HasForeignKey("binnacleHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("binnacleHeader");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("AvionesBackNet.Models.binnacleHeader", b =>
                {
                    b.HasOne("project.users.userEntity", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("User");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("project.roles.rolEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("project.users.userEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("project.users.userEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("project.roles.rolEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("project.users.userEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fletesProyect.models.Driver", b =>
                {
                    b.HasOne("project.utils.catalogue.Catalogue", "countryOpt")
                        .WithMany()
                        .HasForeignKey("countryOptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.utils.catalogue.Catalogue", "model")
                        .WithMany()
                        .HasForeignKey("modelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("countryOpt");

                    b.Navigation("model");

                    b.Navigation("user");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.Orden", b =>
                {
                    b.HasOne("project.users.Models.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fletesProyect.models.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("driverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("client");

                    b.Navigation("driver");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.Provider", b =>
                {
                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.Station", b =>
                {
                    b.HasOne("project.utils.catalogue.Catalogue", "country")
                        .WithMany()
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fletesProyect.models.Provider", "provider")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("country");

                    b.Navigation("provider");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.Visit", b =>
                {
                    b.HasOne("fletesProyect.models.Station", "station")
                        .WithMany()
                        .HasForeignKey("stationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("station");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.modelGasoline", b =>
                {
                    b.HasOne("project.utils.catalogue.Catalogue", "gasolineType")
                        .WithMany()
                        .HasForeignKey("gasolineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.utils.catalogue.Catalogue", "model")
                        .WithMany()
                        .HasForeignKey("modelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.utils.catalogue.Catalogue", "typeVehicle")
                        .WithMany()
                        .HasForeignKey("typeVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("gasolineType");

                    b.Navigation("model");

                    b.Navigation("typeVehicle");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.ordenDetail", b =>
                {
                    b.HasOne("fletesProyect.models.Orden", "order")
                        .WithMany("orderDetails")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fletesProyect.models.product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("order");

                    b.Navigation("product");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.product", b =>
                {
                    b.HasOne("project.utils.catalogue.Catalogue", "brandProduct")
                        .WithMany()
                        .HasForeignKey("brandProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.utils.catalogue.Catalogue", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("brandProduct");

                    b.Navigation("category");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.productProvider", b =>
                {
                    b.HasOne("fletesProyect.models.product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fletesProyect.models.Provider", "provider")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("product");

                    b.Navigation("provider");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.routeStation", b =>
                {
                    b.HasOne("fletesProyect.models.Station", "stationA")
                        .WithMany()
                        .HasForeignKey("stationAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fletesProyect.models.Station", "stationB")
                        .WithMany()
                        .HasForeignKey("stationBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("stationA");

                    b.Navigation("stationB");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.stationProduct", b =>
                {
                    b.HasOne("fletesProyect.models.product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fletesProyect.models.Station", "station")
                        .WithMany()
                        .HasForeignKey("stationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("product");

                    b.Navigation("station");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.vehicleProduct", b =>
                {
                    b.HasOne("fletesProyect.models.product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.utils.catalogue.Catalogue", "typeVehicle")
                        .WithMany()
                        .HasForeignKey("typeVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("product");

                    b.Navigation("typeVehicle");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("fletesProyect.models.visitProduct", b =>
                {
                    b.HasOne("fletesProyect.models.ordenDetail", "ordenDetail")
                        .WithMany()
                        .HasForeignKey("ordenDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.HasOne("fletesProyect.models.Visit", "visit")
                        .WithMany("visitProducts")
                        .HasForeignKey("visitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ordenDetail");

                    b.Navigation("userUpdate");

                    b.Navigation("visit");
                });

            modelBuilder.Entity("project.roles.rolEntity", b =>
                {
                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("project.users.Models.Client", b =>
                {
                    b.HasOne("project.users.userEntity", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("user");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("project.users.userEntity", b =>
                {
                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("project.utils.catalogue.Catalogue", b =>
                {
                    b.HasOne("project.utils.catalogue.Catalogue", "catalogueParent")
                        .WithMany()
                        .HasForeignKey("catalogueParentId");

                    b.HasOne("project.utils.catalogue.catalogueType", "catalogueType")
                        .WithMany("Catalogos")
                        .HasForeignKey("catalogueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("catalogueParent");

                    b.Navigation("catalogueType");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("project.utils.catalogue.catalogueType", b =>
                {
                    b.HasOne("project.users.userEntity", "userUpdate")
                        .WithMany()
                        .HasForeignKey("userUpdateId");

                    b.Navigation("userUpdate");
                });

            modelBuilder.Entity("AvionesBackNet.Models.binnacleHeader", b =>
                {
                    b.Navigation("binnacleBody");
                });

            modelBuilder.Entity("fletesProyect.models.Orden", b =>
                {
                    b.Navigation("orderDetails");
                });

            modelBuilder.Entity("fletesProyect.models.Visit", b =>
                {
                    b.Navigation("visitProducts");
                });

            modelBuilder.Entity("project.utils.catalogue.catalogueType", b =>
                {
                    b.Navigation("Catalogos");
                });
#pragma warning restore 612, 618
        }
    }
}
